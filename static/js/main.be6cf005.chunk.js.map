{"version":3,"sources":["Components/ContactList/ContactList.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","Components/ContactList/ContactList.jsx","Components/ContactForm/ContactForm.jsx","Components/Filter/Filter.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","onChangeFilter","axios","defaults","baseURL","dispatch","get","then","data","catch","error","name","number","contact","post","contactId","delete","getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","includes","connect","contacts","items","onDeleteContact","id","contactsOperations","map","className","styles","list","onClick","ContactForm","state","nameInputId","shortid","generate","numberInputId","handleNameChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","formReset","this","htmlFor","type","onChange","pattern","title","required","Component","changFilter","contactsActions","target","App","fetchContacts","isLoadingContacts","todos","loading","createReducer","payload","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be6cf005.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1i1DD\",\"button\":\"ContactList_button__1Tttu\"};","\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\n// export const onDeleteContact = createAction('contacts/delete');\r\nexport const onChangeFilter = createAction('contacts/changeFilter');\r\n\r\n\r\n\r\n\r\n","import axios from 'axios';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(fetchContactRequest());\r\n\r\n    axios\r\n        .get('/contacts')\r\n        .then(({ data }) =>\r\n            dispatch(fetchContactSuccess(data)))\r\n        .catch(error => dispatch(fetchContactError(error)));\r\n\r\n}\r\n\r\nconst formSubmitHandler = (name, number) => dispatch => {\r\n    const contact = {\r\n        name,\r\n        number,\r\n    };\r\n\r\n    dispatch(addContactRequest());\r\n        \r\n    axios\r\n        .post('/contacts', contact)\r\n        .then(({ data }) =>\r\n            dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error)));\r\n        \r\n};\r\n\r\nconst onDeleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    axios\r\n        .delete(`/contacts/${contactId}`)\r\n        .then(() => dispatch(deleteContactSuccess(contactId)))\r\n        .catch(error => dispatch(deleteContactError(error)));\r\n}\r\n\r\n\r\nexport default {\r\n    fetchContacts,\r\n    formSubmitHandler,\r\n    onDeleteContact,\r\n}","\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport styles from './ContactList.module.css';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n    contacts.map(({ id, name, number }) => (\r\n        <ul>\r\n            <li key={id} className={styles.list}>{name}: {number}\r\n            <button onClick ={()=>onDeleteContact(id)}>Delete</button></li>\r\n        </ul>\r\n    ))\r\n);\r\n\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\n\r\nconst getVisibleContacts = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return allContacts.filter(({ name }) => name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n  \r\n\r\nconst mapStateToProps = ({contacts:{items, filter}}) => ({\r\n  contacts: getVisibleContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\nonDeleteContact: (id) => dispatch(contactsOperations.onDeleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nimport shortid from 'shortid';\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n        name: '',\r\n        number: '',\r\n    };\r\n\r\n   nameInputId = shortid.generate();\r\n    numberInputId = shortid.generate();\r\n\r\n    handleNameChange = event => {\r\n    // console.log(event.currentTarget.value);\r\n    const { name, value } = event.currentTarget;\r\n\r\n    this.setState({ [name] : value });\r\n    };\r\n    \r\n\r\n     handleSubmit = event => {\r\n         const { name, number } = this.state;\r\n        event.preventDefault();\r\n         this.props.onSubmit(name, number);\r\n         this.formReset();\r\n        //  console.log(this.props.contacts);\r\n\r\n\r\n        //    const { name, number } = this.state;\r\n        // const { contacts } = this.props;\r\n        // event.preventDefault();\r\n        \r\n        // if (contacts.find((item) => item.name.toLowerCase() === name.toLowerCase())) {\r\n        //     alert(`${name} is already in contacts.`);\r\n        //     return {name: '', number: ''};\r\n        // } \r\n\r\n        // this.props.onSubmit(name, number);\r\n        //     this.formReset();\r\n        \r\n    }\r\n    \r\n\r\n\r\n    formReset = () => {\r\n        this.setState({\r\n            name: '',\r\n            number: '',\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n                <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor={ this.nameInputId}>name\r\n                    <input\r\n                        type='text'\r\n                        name='name'\r\n                        value={this.state.name}\r\n                        onChange={this.handleNameChange}\r\n                        id={this.nameInputId}\r\n                    />\r\n                    </label>\r\n                    \r\n              \r\n                <label htmlFor={ this.numberInputId}>number\r\n                    <input\r\n                        type='tel'\r\n                    name='number'\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержат ь пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                        value={this.state.number}\r\n                        onChange={this.handleNameChange}\r\n                        id={this.numberInputId}\r\n                    />\r\n                </label>\r\n                \r\n                <button type='submit'>Add contacts</button>\r\n          \r\n        </form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n// const mapStateToProps = (state) => ({\r\n//      contacts: state.contact.contacts,\r\n// })\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name,number) => dispatch (contactsOperations.formSubmitHandler(name,number)),\r\n})\r\nexport default connect(null, mapDispatchToProps)(ContactForm);","// import styles from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\nconst Filter = ({value, changFilter}) => (\r\n    <label>Find contacts by name\r\n        <input type=\"text\" value={value}\r\n        onChange ={changFilter}/>\r\n\r\n    </label>\r\n)\r\n\r\nconst mapStateToProps = (state) => ({\r\n    value: state.contacts.filter\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    changFilter: (event) => dispatch(contactsActions.onChangeFilter(event.target.value)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps )(Filter);","import { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport ContactList from './Components/ContactList/ContactList';\nimport ContactForm from './Components/ContactForm/ContactForm';\nimport Filter from './Components/Filter/Filter';\nimport contactsOperations from '../src/redux/contacts/contacts-operations';\n\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n \n  render() {\n\n  return (   \n  <div>\n  <h1>Phonebook</h1>\n  <ContactForm />\n\n  <h2>Contacts</h2>\n  <Filter/>\n      <ContactList />\n      \n      {this.props.isLoadingContacts && <h1>Загружаем...</h1>}\n      \n</div>)\n\n\n} \n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: state.todos.loading,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps) (App);\n\n\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    onChangeFilter,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError\r\n} from './contacts-actions';\r\n\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactSuccess]: (state, {payload}) => payload,\r\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n    [deleteContactSuccess]: (state, { payload }) => state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactRequest]: () => true,\r\n    [fetchContactSuccess]: () => false,\r\n    [fetchContactError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [onChangeFilter]: (_, {payload}) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n    error\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { configureStore, getDefaultMiddleware, combineReducers } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER\r\n} from \"redux-persist\";\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\n\r\n\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n        serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n}),\r\n    logger,\r\n];\r\n\r\n    \r\n\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducer,\r\n},\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport default store; ","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\nimport store from './redux/store'\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={'Загружаем'} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}