{"version":3,"sources":["Components/ContactList/ContactList.module.css","redux/contacts/contacts-actions.js","Components/ContactList/ContactList.jsx","Components/ContactForm/ContactForm.jsx","Components/Filter/Filter.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","formSubmitHandler","createAction","name","number","payload","id","shortid","generate","onDeleteContact","onChangeFilter","getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","includes","connect","contacts","items","dispatch","contactsAction","map","className","styles","list","onClick","ContactForm","state","nameInputId","numberInputId","handleNameChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","formReset","this","htmlFor","type","onChange","pattern","title","required","Component","contactsActions","changFilter","target","App","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","ContactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.6d30a016.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1i1DD\",\"button\":\"ContactList_button__1Tttu\"};","import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\n\r\nconst formSubmitHandler = createAction('contacts/add', (name, number) => ({\r\n        payload: { id: shortid.generate(), name, number },\r\n\r\n}));\r\n\r\n\r\nconst onDeleteContact = createAction('contacts/delete');\r\nconst onChangeFilter = createAction('contacts/changeFilter');\r\n\r\n\r\n\r\nexport default { formSubmitHandler, onDeleteContact, onChangeFilter };\r\n\r\n\r\n","\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport styles from './ContactList.module.css';\r\nimport contactsAction from '../../redux/contacts/contacts-actions';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n    contacts.map(({ id, name, number }) => (\r\n        <ul>\r\n            <li key={id} className={styles.list}>{name}: {number}\r\n            <button onClick ={()=>onDeleteContact(id)}>Delete</button></li>\r\n        </ul>\r\n    ))\r\n);\r\n\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\n\r\nconst getVisibleContacts = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return allContacts.filter(({ name }) => name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n  \r\n\r\nconst mapStateToProps = ({contacts:{items, filter}}) => ({\r\n  contacts: getVisibleContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\nonDeleteContact: (id) => dispatch(contactsAction.onDeleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\nimport shortid from 'shortid';\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n        name: '',\r\n        number: '',\r\n    };\r\n\r\n   nameInputId = shortid.generate();\r\n    numberInputId = shortid.generate();\r\n\r\n    handleNameChange = event => {\r\n    // console.log(event.currentTarget.value);\r\n    const { name, value } = event.currentTarget;\r\n\r\n    this.setState({ [name] : value });\r\n    };\r\n    \r\n\r\n     handleSubmit = event => {\r\n         const { name, number } = this.state;\r\n        event.preventDefault();\r\n         this.props.onSubmit(name, number);\r\n         this.formReset();\r\n        //  console.log(this.props.contacts);\r\n\r\n\r\n        //    const { name, number } = this.state;\r\n        // const { contacts } = this.props;\r\n        // event.preventDefault();\r\n        \r\n        // if (contacts.find((item) => item.name.toLowerCase() === name.toLowerCase())) {\r\n        //     alert(`${name} is already in contacts.`);\r\n        //     return {name: '', number: ''};\r\n        // } \r\n\r\n        // this.props.onSubmit(name, number);\r\n        //     this.formReset();\r\n        \r\n    }\r\n    \r\n\r\n\r\n    formReset = () => {\r\n        this.setState({\r\n            name: '',\r\n            number: '',\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n                <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor={ this.nameInputId}>name\r\n                    <input\r\n                        type='text'\r\n                        name='name'\r\n                        value={this.state.name}\r\n                        onChange={this.handleNameChange}\r\n                        id={this.nameInputId}\r\n                    />\r\n                    </label>\r\n                    \r\n              \r\n                <label htmlFor={ this.numberInputId}>number\r\n                    <input\r\n                        type='tel'\r\n                    name='number'\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержат ь пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                        value={this.state.number}\r\n                        onChange={this.handleNameChange}\r\n                        id={this.numberInputId}\r\n                    />\r\n                </label>\r\n                \r\n                <button type='submit'>Add contacts</button>\r\n          \r\n        </form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n// const mapStateToProps = (state) => ({\r\n//      contacts: state.contact.contacts,\r\n// })\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name,number) => dispatch (contactsActions.formSubmitHandler(name,number)),\r\n})\r\nexport default connect(null, mapDispatchToProps)(ContactForm);","// import styles from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\nconst Filter = ({value, changFilter}) => (\r\n    <label>Find contacts by name\r\n        <input type=\"text\" value={value}\r\n        onChange ={changFilter}/>\r\n\r\n    </label>\r\n)\r\n\r\nconst mapStateToProps = (state) => ({\r\n    value: state.contacts.filter\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    changFilter: (event) => dispatch(contactsActions.onChangeFilter(event.target.value)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps )(Filter);","import { Component } from \"react\";\nimport ContactList from './Components/ContactList/ContactList';\nimport ContactForm from './Components/ContactForm/ContactForm';\nimport Filter from './Components/Filter/Filter';\n\nclass App extends Component {\n \n  render() {\n\n  return (   \n  <div>\n  <h1>Phonebook</h1>\n  <ContactForm />\n\n  <h2>Contacts</h2>\n  <Filter/>\n  <ContactList />\n</div>)\n\n\n} \n}\n\nexport default App;\n\n\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\n\r\nconst items = createReducer([], {\r\n    [actions.formSubmitHandler]: (state, { payload }) => [...state, payload],\r\n    [actions.onDeleteContact]: (state, { payload }) => state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [actions.onChangeFilter]: (_, {payload}) => payload,\r\n});\r\n\r\n\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { configureStore, getDefaultMiddleware, combineReducers } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER\r\n} from \"redux-persist\";\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\n\r\n\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n        serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n}),\r\n    logger,\r\n];\r\n\r\n    \r\nconst ContactsPersistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter'],\r\n};\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: { contacts: persistReducer(ContactsPersistConfig, contactsReducer), \r\n},\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor }; ","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\nimport store from './redux/store'\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={'Загружаем'} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}